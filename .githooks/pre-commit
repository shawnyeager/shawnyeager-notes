#!/bin/bash

# Pre-commit hook to auto-fix markdown issues
# 1. Uses markdownlint-cli2 --fix for standard formatting (respects .markdownlint.json)
# 2. Custom smart punctuation cleanup (markdownlint doesn't handle this)

set -e

# Check if there are any staged markdown files
STAGED_MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$' || true)

if [ -z "$STAGED_MD_FILES" ]; then
  exit 0
fi

echo ""
echo "üîç Auto-fixing markdown issues in staged files..."
echo ""

FIXED=false

# Step 1: Run markdownlint-cli2 --fix on staged files
# This respects .markdownlint.json and fixes:
# - MD009: Trailing spaces
# - MD010: Hard tabs
# - MD012: Multiple blank lines
# - MD018/019: Heading spacing
# - MD023: Indented headings
# - MD047: Missing trailing newline
# - Plus 25+ other fixable rules
if command -v markdownlint-cli2 &> /dev/null; then
  echo "   üìã Running markdownlint-cli2 --fix..."
  for file in $STAGED_MD_FILES; do
    # Skip CLAUDE.md and README.md (same as GitHub Action)
    if [[ "$file" == "CLAUDE.md" || "$file" == "README.md" ]]; then
      continue
    fi

    if [ -f "$file" ]; then
      # Run markdownlint with --fix, suppress output unless there are unfixable errors
      if markdownlint-cli2 --fix "$file" 2>&1 | grep -v "^markdownlint-cli2" | grep -v "^Finding:" | grep -v "^Linting:" | grep -v "^Summary: 0 error"; then
        FIXED=true
      fi
    fi
  done
  echo ""
fi

# Step 2: Fix smart punctuation (markdownlint doesn't have rules for this)
echo "   ‚ú® Fixing smart punctuation..."
for file in $STAGED_MD_FILES; do
  # Skip CLAUDE.md and README.md (same as GitHub Action)
  if [[ "$file" == "CLAUDE.md" || "$file" == "README.md" ]]; then
    continue
  fi

  if [ ! -f "$file" ]; then
    continue
  fi

  CHANGES=false

  # Check for curly apostrophes (U+2019)
  if grep -q $'\xe2\x80\x99' "$file"; then
    sed -i 's/\xe2\x80\x99/'\''/g' "$file"
    echo "      ‚úèÔ∏è  $file: Fixed curly apostrophes (') ‚Üí (')"
    CHANGES=true
  fi

  # Check for curly left single quote (U+2018)
  if grep -q $'\xe2\x80\x98' "$file"; then
    sed -i 's/\xe2\x80\x98/'\''/g' "$file"
    echo "      ‚úèÔ∏è  $file: Fixed curly left quotes (') ‚Üí (')"
    CHANGES=true
  fi

  # Check for curly left double quote (U+201C)
  if grep -q $'\xe2\x80\x9c' "$file"; then
    sed -i 's/\xe2\x80\x9c/"/g' "$file"
    echo "      ‚úèÔ∏è  $file: Fixed curly left quotes (\") ‚Üí (\")"
    CHANGES=true
  fi

  # Check for curly right double quote (U+201D)
  if grep -q $'\xe2\x80\x9d' "$file"; then
    sed -i 's/\xe2\x80\x9d/"/g' "$file"
    echo "      ‚úèÔ∏è  $file: Fixed curly right quotes (\") ‚Üí (\")"
    CHANGES=true
  fi

  # Check for em dash (U+2014)
  if grep -q $'\xe2\x80\x94' "$file"; then
    sed -i 's/\xe2\x80\x94/---/g' "$file"
    echo "      ‚úèÔ∏è  $file: Fixed em dashes (‚Äî) ‚Üí (---)"
    CHANGES=true
  fi

  # Check for en dash (U+2013)
  if grep -q $'\xe2\x80\x93' "$file"; then
    sed -i 's/\xe2\x80\x93/--/g' "$file"
    echo "      ‚úèÔ∏è  $file: Fixed en dashes (‚Äì) ‚Üí (--)"
    CHANGES=true
  fi

  # Check for ellipsis (U+2026)
  if grep -q $'\xe2\x80\xa6' "$file"; then
    sed -i 's/\xe2\x80\xa6/.../g' "$file"
    echo "      ‚úèÔ∏è  $file: Fixed ellipsis (‚Ä¶) ‚Üí (...)"
    CHANGES=true
  fi

  if [ "$CHANGES" = true ]; then
    FIXED=true
  fi
done

# Re-stage all fixed files
if [ "$FIXED" = true ]; then
  for file in $STAGED_MD_FILES; do
    if [ -f "$file" ]; then
      git add "$file"
    fi
  done
  echo ""
  echo "‚úÖ Auto-fixed markdown issues. Changes have been staged."
  echo ""
fi

exit 0
